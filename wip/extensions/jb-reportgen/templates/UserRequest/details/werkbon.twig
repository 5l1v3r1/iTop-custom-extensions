<!doctype html>
<html lang="en">

<head>

	<script src="../../libext/vendor/components/jquery/jquery.min.js"></script>

	<link rel="stylesheet" href="../../libext/vendor/twbs/bootstrap/dist/css/bootstrap.min.css">
	<script src="../../libext/vendor/twbs/bootstrap/dist/js/bootstrap.min.js"></script>


    <link rel="stylesheet" href="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/css/ol.css" type="text/css">
    <script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.1.3/build/ol.js"></script>
	
	
    <style>
        .map {
            height: 600px;
            width: 100%;
        }
    </style>
	
	
    <title>OpenLayers example</title>
	
	
</head>

<body>

	<div class="container">
		<div class="row">
			<div class="col-12">
				
				<h1>Werkbon melding {{ item.key }}</h1><br>
				
				<p>
					<b>{{ item.fields.title }}</b>
				</p>
				
				{# Currently already includes all details and pre tags #}
				{{ item.fields.description|trim }}
				
			</div>
			
		</div>
		
		{% if item.fields.geom != '' %}
			<div class="row">
				<div id="map" class="map"></div>
			</div>
		{% endif %}
		

	{% if item.fields.geom != '' %}
		<script type="text/javascript">
		
		
		
			var oFormatWKT = new ol.format.WKT();
			var oFeature = ( '{{ item.fields.geom }}' == '' ? null : oFormatWKT.readFeature('{{ item.fields.geom }}') )
		
			console.log('ok');
			var oSource = new ol.source.Vector({ 
				features: ( oFeature ? [ oFeature ] : [] )
			});
			 
			var oVector = new ol.layer.Vector({
				source: oSource,
				style: ol_style
			});

			
			var oMap = new ol.Map({
				target: 'map',
				layers: [
					new ol.layer.Tile({
						source: new ol.source.OSM()
					}),
					oVector
				],
				view: new ol.View({
					center: getCenter( oFeature ),
					zoom: 17,
					projection: 'EPSG:3857'
				})
			});
			
			function getCenter( oFeature ) {
			
				if( !oFeature) {
					return [358652.11242031807, 6606360.84951076];
				}
			
				var sGeomType = oFeature.getGeometry().getType();
				
				switch( sGeomType ) {
				
					case 'Point':
						return oFeature.getGeometry().getCoordinates();
						break;
						
					case 'LineString':
						
						// No real way to determine center of a line
						// Let's guess and assume it's a line from A to B
						
						var coords = oFeature.getGeometry().getCoordinates();
						var coordStart = oFeature.getGeometry().getCoordinates()[0];
						var coordEnd = oFeature.getGeometry().getCoordinates()[coords.length-1];
						
						
						return [ ( coordStart[0] + coordEnd[0] ) / 2 , ( coordStart[1] + coordEnd[1] ) / 2 ];
						
						break;
						
					case 'Polygon':
						return oFeature.getGeometry().getInteriorPoint().getCoordinates();
						break;
						
					case 'default':
						alert('To do: add support for geometry type ' + sGeomType);
				
				}
			
			}
			
			
			function ol_style(feature) {
				switch( feature.getGeometry().getType() ) {
				
					case "Point": 
					
						return [
							new ol.style.Style({ 
								image: new ol.style.Circle({	
									radius: 10,
									fill: new ol.style.Fill({
									  color: "rgba(255, 0, 0, 0.6)"
									}),
									stroke: new ol.style.Stroke({
									  color: "rgba(255, 0, 0, 1)",
									  width: 1
									})
								})
							})
						];
						
					case "Polygon": 
					
						return [
							new ol.style.Style({ 
								fill: new ol.style.Fill({
								  color: "rgba(255, 0, 0, 0.6)"
								}),
								stroke: new ol.style.Stroke({
								  color: "rgba(255, 0, 0, 1)",
								  width: 1
								})										 
							})
						];
						
					case "LineString": 								
					
						return [
							new ol.style.Style({ 										
								fill: new ol.style.Fill({
								  color: "rgba(255, 0, 0, 0.6)"
								}),
								stroke: new ol.style.Stroke({
								  color: "rgba(255, 0, 0, 1)",
								  width: 1
								}) 
							})
						];
						
					default: 
						// Should not happen
						break;
				}
			}	
									 
									 
									 
									 
		</script>
	{% endif %}
	
	<hr> 
	
		{% for attachment in item.attachments %}
		
			<div class="row">
				<img src="data:{{ attachment.mimetype }};base64, {{ attachment.data }}" alt="Red dot" />
			</div>
			
		{% endfor %}
	
	</div>

</body>

</html>