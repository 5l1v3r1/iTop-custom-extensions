<?php

// PHP Data Model definition file

// WARNING - WARNING - WARNING
// DO NOT EDIT THIS FILE (unless you know what you are doing)
//
// If you use supply a datamodel.xxxx.xml file with your module
// the this file WILL BE overwritten by the compilation of the
// module (during the setup) if the datamodel.xxxx.xml file
// contains the definition of new classes or menus.
//
// The recommended way to define new classes (for iTop 2.0) is via the XML definition.
// This file remains in the module's template only for the cases where there is:
// - either no new class or menu defined in the XML file
// - or no XML file at all supplied by the module

class cApplicationObjectExtension_ContactMethod implements iApplicationObjectExtension {
	 
	/**
	 * Invoked to determine whether an object can be written to the database 
	 *	
	 * The GUI calls this verb and reports any issue.
	 * Anyhow, this API can be called in other contexts such as the CSV import tool.
	 * 
	 * @param DBObject $oObject The target object
	 * @return string[] A list of errors message. An error message is made of one line and it can be displayed to the end-user.
	 */	
	public function OnCheckToWrite( $oObject ) {
		
		return $this->ValidateInput($oObject);
				
	}
	
	/**
	 * Invoked to determine whether an object has been modified in memory
	 *
	 *	The GUI calls this verb to determine the message that will be displayed to the end-user.
	 *	Anyhow, this API can be called in other contexts such as the CSV import tool.
	 *	
	 * If the extension returns false, then the framework will perform the usual evaluation.
	 * Otherwise, the answer is definitively "yes, the object has changed".	 	 	 
	 *	 
	 * @param DBObject $oObject The target object
	 * @return boolean True if something has changed for the target object
	 */	
	public function OnIsModified($oObject) {
		return false;
	}
 
	/**
	 * Invoked to determine whether an object can be deleted from the database
	 *	
	 * The GUI calls this verb and stops the deletion process if any issue is reported.
	 * 	 
	 * Please note that it is not possible to cascade deletion by this mean: only stopper issues can be handled. 	 
	 * 
	 * @param DBObject $oObject The target object
	 * @return string[] A list of errors message. An error message is made of one line and it can be displayed to the end-user.
	 */	
	public function OnCheckToDelete($oObject) {
		return Array();
		
	}

	/**
	 * Invoked when an object is updated into the database
	 *	
	 * The method is called right <b>after</b> the object has been written to the database.
	 * 
	 * @param DBObject $oObject The target object
	 * @param CMDBChange|null $oChange A change context. Since 2.0 it is fine to ignore it, as the framework does maintain this information once for all the changes made within the current page
	 * @return void
	 */	
	public function OnDBUpdate($oObject, $oChange = null) {
		$this->OnContactMethodUpdate($oObject);
		return;
	}

	/**
	 * Invoked when an object is created into the database
	 *	
	 * The method is called right <b>after</b> the object has been written to the database.
	 * 
	 * @param DBObject $oObject The target object
	 * @param CMDBChange|null $oChange A change context. Since 2.0 it is fine to ignore it, as the framework does maintain this information once for all the changes made within the current page
	 * @return void
	 */	
	public function OnDBInsert($oObject, $oChange = null) {
		$this->OnContactMethodUpdate($oObject);
		return;
	}

	/**
	 * Invoked when an object is deleted from the database
	 *	
	 * The method is called right <b>before</b> the object will be deleted from the database.
	 * 
	 * @param DBObject $oObject The target object
	 * @param CMDBChange|null $oChange A change context. Since 2.0 it is fine to ignore it, as the framework does maintain this information once for all the changes made within the current page
	 * @return void
	 */	
	public function OnDBDelete($oObject, $oChange = null) {
		$this->OnContactMethodDelete($oObject);
		return;
	}
	
	/**
	 * 
	 * Updates related Person object each time a ContactMethod is removed.
	 * It checks if it's one of the default contact details (phone, mobile phone, email) and sets the info to blank or the last other known info.
	 *  	 
	 */
	public function OnContactMethodDelete($oObject) {
		
		// If a ContactMethod is deleted, the related Person object should be updated to reflect these changes 
		if( $oObject instanceof ContactMethod ) {
			
			$sContactMethod = $oObject->Get('contact_method');
			
			switch( $sContactMethod ) {
				
				case 'phone':
				case 'mobile_phone':
				case 'email':
				
					// Write back to Person object. Latest change should be primary.						
					$sOQL = 'SELECT Person WHERE id = '. $oObject->Get('person_id');
					$oSet_Person = new DBObjectSet(DBObjectSearch::FromOQL($sOQL));
			
					// Same person: previous/alternative ContactMethod available?
					// Since this happens before delete: don't include this object. Might be most recent.
					$sOQL = 'SELECT ContactMethod WHERE person_id = ' . $oObject->Get('person_id') . ' AND contact_method = "' . $sContactMethod . '" AND id != "' . $oObject->Get('id'). '"';			
					$oSet_ContactMethod = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), /* Order by */ Array('id' => /* Ascending */ false), /* Arguments */ Array(), /* Extended data spec */ null, /* Amount */ 1);
		
					// Only 1 person should be retrieved
					$oPerson = $oSet_Person->Fetch();

					// Set to empty
					$oPerson->Set($sContactMethod, '');
						
					// But hey, maybe there's another last known ContactMethod.
					// For this, simply look at 'id', not date of last change (yet)
					// Todo: look if we can do something with the DBOBjectSet::seek() method
					while($oContactMethod = $oSet_ContactMethod->Fetch()){
						$oPerson->Set($sContactMethod, $oContactMethod->Get('contact_detail'));				
					}
					
					$oPerson->DBUpdate();
					
					break;
				
				default:
					break;
		
			}
			
		}
		
		// if Person is deleted, iTop should automatically remove all ContactMethods by default
		
		return;
	}
	
	
	/**
	 * 
	 * Updates related Person object each time a ContactMethod is updated and the other way around.
	 *
	 */
	public function OnContactMethodUpdate($oObject) {
				
		if( $oObject instanceof ContactMethod ) {
			
			$sContactMethod = $oObject->Get('contact_method');
			
			// Write back to Person
			switch($sContactMethod) {
				
				// These properties are available in the Person class
				case 'phone':
				case 'mobile_phone':
				case 'email':
					
					// Write back to Person. Latest change should be primary.						
					$sOQL = 'SELECT Person WHERE id = '. $oObject->Get('person_id');
					$oSet_Person = new DBObjectSet(DBObjectSearch::FromOQL($sOQL));
								
					// Only 1 person should be retrieved
					$oPerson = $oSet_Person->Fetch();
					
					// Prevent loop: only if the Person property is not equal to this new detail: update().
					if( $oPerson->Get($sContactMethod) != $oObject->Get('contact_detail') ) {
						$oPerson->Set($oObject->Get('contact_method'), $oObject->Get('contact_detail'));
						$oPerson->DBUpdate();					
					}					
					
					break;
				
				// Other properties aer not available in Person class
				default: 
					break;
				
			}
		}
		
		elseif( $oObject instanceof Person ) {
			
			// Check if a ContactMethod exists for email, phone, mobile_phone. 
			// If not, create.
			$aContactMethods = Array('email', 'phone', 'mobile_phone');
						
			foreach($aContactMethods as $sContactMethod) {
			
				// Ignore if empty
				if( $oObject->Get($sContactMethod) != '' ) {
						
					// Select ContactMethod
					$sOQL = 'SELECT ContactMethod WHERE person_id = ' . $oObject->Get('id') .' AND contact_method = "' . $sContactMethod . '" AND contact_detail = "' . $oObject->Get($sContactMethod). '"';
					$oSet_ContactMethods = new DBObjectSet(DBObjectSearch::FromOQL($sOQL));
					
					// No contact method was found with these details
					if( $oSet_ContactMethods->Count() == 0 ) {
						
						// Create ContactMethod
						$oContactMethod = new ContactMethod();
						$oContactMethod->Set('person_id', $oObject->Get('id'));
						$oContactMethod->Set('contact_method', $sContactMethod);
						$oContactMethod->Set('contact_detail', $oObject->Get($sContactMethod));
						$oContactMethod->DBInsert();	
						
					}
				}
			}
		}
	}
	
	/**
	 * 
	 * Validates contact method.
	 * 
	 * @param Object $oObject iTop object to validate	 * 
	 *  
	 * @return Array. Empty array if no errors, one or more messages if validation failed.
	 *  
	 */
	public function ValidateInput($oObject) {
		
		if( $oObject instanceof ContactMethod ) {
			
			$sContactDetail = $oObject->Get('contact_detail');
			
			switch( $oObject->Get('contact_method') ) {
				
				case 'phone':
				
					$sPhone = preg_replace('/\D/', '', $sContactDetail);
					
					// In Belgium, this should start with 0 and be 9 digits in total (national).
					// If it starts with 32, it's the national prefix in front.
					
					if( substr($sPhone, 0, 1) == '0' && strlen($sPhone) != 9 ) {
						
						return Array( 
							Dict::S('Errors/ContactMethod/InvalidPhoneNumber')
						);	
				
					}
					elseif( substr($sPhone, 0, 2) == '32' && strlen($sPhone) != 10 )  {
						
						return Array( 
							Dict::S('Errors/ContactMethod/InvalidPhoneNumber')
						);	
						
					}
					else {
						
						// Just ignore it, international number?						
						
					}
					
					$oObject->Set('contact_detail', $sPhone);
				
					break;
				
				case 'mobile_phone':
				
					$sMobilePhone = preg_replace('/\D/', '', $sContactDetail);
					
					// In Belgium, this should start with 0 and be 9 digits in total (national).
					// If it starts with 32, it's the national prefix in front.
					
					if( substr($sMobilePhone, 0, 1) == '0' && strlen($sMobilePhone) != 10 ) {
						
						return Array( 
							Dict::S('Errors/ContactMethod/InvalidMobilePhoneNumber')
						);	
				
					}
					elseif( substr($sMobilePhone, 0, 2) == '32' && strlen($sMobilePhone) != 11 )  {
						
						return Array( 
							Dict::S('Errors/ContactMethod/InvalidMobilePhoneNumber')
						);	
						
					}
					else {
						
						// Just ignore it, international number?						
						
					}
					
					$oObject->Set('contact_detail', $sMobilePhone);
				
					break;
				
				
				case 'email':
								
					if( !filter_var($sContactDetail, FILTER_VALIDATE_EMAIL) ) {
					 
						return Array( 
							Dict::S('Errors/ContactMethod/InvalidEmail')
						);	
						
					}
				
				default:
					break;
					
			}
		}
		 
		// No errors		
		return Array();
		
	}
}
